#include "zeroReservation.h"
#include <cstdlib>

/*----------  Function & Procedure  ----------*/

/*===================================
=            Create List            =
===================================*/
void createListPlane(plane &l){
	l.first = NULL;
	l.last = NULL;
}
void createListSchedules(schedules &l) {
	l.first = NULL;
	l.last = NULL;
}
void createListPassenger(passenger &l){
	l.first = NULL;
}

void createListRelasi(listRelasi &l) {
    l.first = NULL;
    l.last = NULL;
}

/*=====  End of Create List  ======*/

/*==================================
=            Alocattion            =
==================================*/
addressSchedules alokasiSch(dataSchedules x){
	addressSchedules p;
	p = new elmSchedules;
	p->info = x;
	p->next = NULL;
	p->prev = NULL;

    createListRelasi(p->child);
	return p;
}

addressPlane alokasiPlane(dataPlane x){
	addressPlane p;
	p = new elmPlane;
	p->info = x;
	p->next = NULL;
	p->prev = NULL;

	return p;
}

addressPassenger alokasiPassenger(dataPassenger x){
	addressPassenger p;
	p = new elmPassenger;
	p->info = x;
	p->next = NULL;

	return p;
}

addressRelasi alokasiRelasi(addressPlane c) {
    addressRelasi p = new elmListRelasi;
    info(p) = c;
    next(p) = NULL;

    return p;
}
/*=====  End of Alocattion  ======*/




/*==============================
=            Insert            =
==============================*/
/*----------  Option Insert  ----------*/

/*----------  Schedules  ----------*/
void insertSchedulesMain(schedules &l){
	dataSchedules x;
	addressSchedules p;

	char pilih;
	do {
		addDataSchedules(l,x);

		p = alokasiSch(x);
		insertFirstSch(l , p);
		cout << "Success... \n Masukkan data lagi ? (y/n) ";
		cin >> pilih;
		system("CLS");
	} while (pilih != 'n' && pilih != 'N');
}

void addDataSchedules(schedules l ,dataSchedules &x) {
	cout << "========================================" << endl;
	cout <<	"=            Zero Reservation          =" << endl;
	cout << "========================================" << endl;
	cout << "# Input Schedules Data  " << endl;
	pilihbalik:
	cout << "> Schedules ID \t :" ; cin >> x.schID;

	if (checkSchedulesID( l , x.schID)) {
			cout << " -- ID Already exist -- ";
			cout << "masukkan ID lagi" << endl;
			goto pilihbalik;
	}
	cout << "> Date (DD/MM/YYYY) \t :"; cin >> x.date;
		if(cin.fail())
        {
          cin.clear();
          cin.ignore();
          cout << "Error, Input tipe datanya salah.";
        }
}
void insertFirstSch(schedules &l , addressSchedules p){
    if (l.first == NULL) {
        l.first = p;
        l.last = p;
    } else {
        p->next = l.first;
        l.first->prev = p;
        l.first = p;
    }
}


void insertLastSch(schedules &l , addressSchedules p){
	if (l.first == NULL) {
		l.first = p;
		l.last = p;
	} else {
		p->prev = l.last;
		l.last->next = p;
		l.last = p;
	}
}

/*----------  Plane  ----------*/
void addDataPlane(plane l , dataPlane &x) {

	system("CLS");
	cout << endl;
	cout << "========================================" << endl;
	cout <<	"=            Zero Reservation          =" << endl;
	cout << "========================================" << endl;
	cout << "# Input Planes Data  " << endl;
	pilihbalikID:
	cout << "> Plane ID \t :" ; cin >> x.planeID;

	if (checkPlaneID( l , x.planeID)) {
			cout << " -- ID Already exist -- ";
			cout << "masukkan ID lagi" << endl;
			goto pilihbalikID;
	}

	cout << "> Type \t :"; cin >> x.type;
	cout << "> route \t :"; cin >> x.route;
		pilihbalik:
	cout << "> price \t :"; cin >> x.price;
		 if(cin.fail())
         {
           cin.clear();
           cin.ignore();
           cout << "Error, Input tipe datanya salah." << endl;
          goto pilihbalik;
         }
         pilihbalik2:
	cout << "> capacity \t :"; cin >> x.capacity;

	if(cin.fail())
        {
          cin.clear();
          cin.ignore();
          cout << "Error, Input tipe datanya salah." << endl;
          goto pilihbalik2;

        }

}

void insertPlaneMain(plane &l) {
	dataPlane x;
	addressPlane p;

	char pilih;
	do {
		addDataPlane(l,x);
		p = alokasiPlane(x);
		insertFirstPlane( l , p);
		cout << "Success... \n Masukkan data lagi ? (y/n) ";
		cin >> pilih;
		system("CLS");
	} while (pilih != 'n' && pilih != 'N');

}

void insertFirstPlane(plane &l , addressPlane p){
    if (l.first == NULL) {
        l.first = p;
        l.last = p;
    } else {
        p->next = l.first;

        l.first = p;
          l.first->prev = p;
    }
}

void insertLastPlane(plane &l , addressPlane p){
	if (l.first == NULL) {
		l.first = p;
		l.last = p;
	} else {
		p->prev = l.last;
		l.last->next = p;
		l.last = p;
	}
}

/*----------  Passenger  ----------*/
void insertPassengerMain(passenger &l) {
	dataPassenger x;


	char pilih;
	do {
		addDataPassenger( l , x);
		addressPassenger p = alokasiPassenger(x);
		insertFirstPas(l,p);
		cout << "Success... \n Masukkan data lagi ? (y/n) ";
		cin >> pilih;
		system("CLS");
	} while (pilih != 'n' && pilih != 'N');
}

void addDataPassenger(passenger l , dataPassenger &x) {
	cout << endl;
	cout << "========================================" << endl;
	cout <<	"=            Zero Reservation          =" << endl;
	cout << "========================================" << endl;
	cout << "# Input Passenger Data" << endl;
	pilihbalikID:
	cout << "> passenger ID \t : " ; cin >> x.passengerID;

	if (checkPassengerID( l , x.passengerID)) {
			cout << " -- ID Already exist -- ";
			cout << "masukkan ID lagi" << endl;
			goto pilihbalikID;
	}

	cout << "> name \t : "; cin >> x.name;
	cout << "> password \t  :"; cin >> x.password;
	pilihbalik:
	cout << "> age \t : "; cin >> x.age;
    if(cin.fail())
        {
          cin.clear();
          cin.ignore();
          cout << "Error, Input tipe datanya salah.";
        goto pilihbalik;
        }
	cout << "> gender \t : "; cin >> x.gender;
	cout << "> address \t : "; cin >> x.address;

}
void insertFirstPas(passenger &l, addressPassenger p){
    if (l.first == NULL) {
        l.first = p;
    } else {
        p->next = l.first;
        l.first = p;
    }
}


void insertLastPas(passenger &l , addressPassenger p) {
    if (l.first == NULL) {
        l.first = p;
    } else {
        addressPassenger q = l.first;
        while (q->next != NULL) {
            q = q->next;
        }
        q->next = p;
    }
}

/*----------  Relasi  ----------*/
void insertFirst(listRelasi &l, addressRelasi p){
    if (l.first == NULL) {
        l.first = p;
        l.last = p;
    } else {
        p->next = l.first;

        l.first = p;
          l.first->prev = p;
    }
}
void insertLast(listRelasi &l, addressRelasi p){
	if (l.first == NULL) {
		l.first = p;
		l.last = p;
	} else {
		p->prev = l.last;
		l.last->next = p;
		l.last = p;
	}
}
/*=====  End of Insert  ======*/

/*----------  add  ---------- */
/*=====  End of add  ======*/


/*==============================
=            Delete            =
==============================*/
/*----------  schedules  ----------*/
void deleteFirstSch(schedules &l) {
    addressSchedules p;


    if(first(l) == NULL)
    {
        cout << "List sudah kosong" << endl;
    }
    else
    {
        p = first(l);
        if ((first(l) != NULL)&&(next(first(l))==NULL))
        {
            first(l) = NULL;
            last(l) = NULL;
            delete p;
        }
        else
        {
            prev(next(p)) = NULL;
            first(l) = next(p);
            next(p) = NULL;
            delete p;
        }
    }

}

void deleteLastSch(schedules &l){
    addressSchedules p;
    if (first(l) != NULL) {
         if (first(l) == last(l)) {
            first(l) == NULL;
            last(l) == NULL;
         } else {
            p = last(l);
            last(l) = last(l)->prev;
            prev(p) = NULL;
            last(l)->next = NULL;
             delete p;
         }

    } else {
        cout << "List sudah kosong" << endl;
    }

}
void deleteSchbyID(schedules &l) {
    addressSchedules p;

    string id;
	cout << "========================================" << endl;
	cout <<	"=            Zero Reservation          =" << endl;
	cout << "========================================" << endl;

   	char pilih;
   	do {
	   	cout << endl;
	   	cout << "Masukkan ID yang akan didelete : " ;
	    cin >> id;

	    p = findElmSchedules(l , id);

	    if (p == NULL) {
	        cout << "-- ID Jadwal tidak ditemukan --" << endl;
	    } else {
	        cout << info(p).schID;
	        if (next(first(l)) == NULL) {
	            first(l) = NULL;
	            last(l) = NULL;

	            delete p;
	        } else {
	         	if (p == first(l) && next(p) != NULL ){
	                deleteFirstSch(l);
	            } else    if (next(p) == NULL && (prev(p) != NULL)) {
	                deleteLastSch(l);
	            }
	            else {
	                addressSchedules q = p->prev;
	                q->next = p->next;
	                p->next->prev = q;
	                p->next = NULL;
	                p->prev = NULL;

	                delete p;
	            }
	        }
	        cout << " Berhasil dihapus..." << endl;
	    }
	    cout << "Hapus lagi ? (y/n) ";
	    cin >> pilih;
	} while (pilih != 'n' && pilih != 'N');
}

void deleteSchMain(schedules &l);
/*----------  plane  ----------*/
void deleteFirstPlane(plane &l){
  addressPlane p;

    if(first(l) == NULL)
    {
        cout << "List sudah kosong" << endl;
    }
    else
    {
        p = first(l);
        if ((first(l) != NULL)&&(next(first(l))==NULL))
        {
            first(l) = NULL;
            last(l) = NULL;
            delete p;
        }
        else
        {
            prev(next(p)) = NULL;
            first(l) = next(p);
            next(p) = NULL;
            delete p;
        }
    }

}

void deleteLastPlane(plane &l){
    addressPlane p;
    if (first(l) != NULL) {
         if (first(l) == last(l)) {
            first(l) == NULL;
            last(l) == NULL;
         } else {
            p = last(l);
            last(l) = last(l)->prev;
            prev(p) = NULL;
            last(l)->next = NULL;
             delete p;

         }

    } else {
        cout << "List sudah kosong" << endl;
    }
}

void deletePlanebyID(plane &l){
    addressPlane p;
    string id;
	cout << "========================================" << endl;
	cout <<	"=            Zero Reservation          =" << endl;
	cout << "========================================" << endl;

   	char pilih;

   	do {
	    cout << "Masukkan ID Pesawat yang akan didelete : " ;
	    cin >> id;

	    p = findElmPlane(l , id);

	    if (p == NULL) {
	        cout << " -- ID Pesawat tidak ditemukan -- " << endl;
	    } else {
	        cout << info(p).planeID;
	        if (next(first(l)) == NULL) {
	            first(l) = NULL;
	            last(l) = NULL;

	            delete p;
	        } else {
	            if (next(p) == NULL && (prev(p) != NULL)) {
	                deleteLastPlane(l);
	            } else  if (p == first(l) && next(p) != NULL ){
	                deleteFirstPlane(l);
	            } else {
	                addressPlane q = p->prev;
	                q->next = p->next;
	                p->next->prev = q;
	                p->next = NULL;
	                p->prev = NULL;
	                delete p;
	            }
	        }
	     cout << " Berhasil dihapus..." << endl;
	    }
	    cout << "Hapus lagi ? (y/n) " ;
	    cin >> pilih;
	} while (pilih != 'n' && pilih != 'N');
}
void deletePlaneMain(plane &l);

/*----------  passenger  ----------*/
void deleteFirstPas(passenger &l){
	if (first(l) != NULL){
        addressPassenger P = first(l);
        if (next(P) == NULL){
            first(l) = NULL;
        } else {
            first(l) = next(P);
            next(P) = NULL;
        }
    	delete P;
    }
}

void deleteLastPas(passenger &l){
	if (first(l) != NULL){
        addressPassenger Q = first(l);
        if (Q->next == NULL){
            first(l) = NULL;
        } else {
        	addressPassenger P;
            while ((Q->next)->next != NULL){
                Q = Q->next;
            }
            P = Q->next;
            Q->next = NULL;
            delete P;
        }
	}
}

void deletePasbyID(passenger &l){

    addressPassenger p;
    string id;
	cout << "========================================" << endl;
	cout <<	"=            Zero Reservation          =" << endl;
	cout << "========================================" << endl;

   	char pilih;
   	do {
	    cout << "Masukkan ID Passanger yang akan didelete : " << endl;
	    cin >> id;

	     p = findElmPassenger(l , id);

	    if (p == NULL) {
	        cout << " -- ID Passenger tidak ditemukan -- " << endl;
	    } else {
	        cout << info(p).passengerID;
	        if (next(first(l)) == NULL) {
	            first(l) = NULL;

	            delete p;
	        } else {
	            if (next(p) == NULL) {
	                deleteLastPas(l);
	            } else  if (p == first(l) && next(p) != NULL ){
	                deleteFirstPas(l);
	            } else {
	                addressPassenger q = l.first;

	                while(next(q) != p) {
	                    q = next(q);
	                }

	                next(q) = next(p);
	                next(p) = NULL;
	                delete p;
	            }
	        }
	        cout << " Berhasil dihapus..." << endl;
	    }

	    cout << "Hapus lagi? (y/n) ";
	    cin >> pilih;
	} while (pilih != 'N' && pilih != 'n');
}
void deletePasMain(passenger &l);


/*=====  End of Delete  ======*/




/*========================================
=            Find & Searching            =
========================================*/
addressPlane findElmPlane(plane l , string planeID){
    if (first(l) == NULL) {
        return NULL;
    }
    else {
        addressPlane p = first(l);
        while ( p != NULL && info(p).planeID != planeID) {
            p = next(p);
        }
        if (p == NULL) {
            return NULL;
        } else {
            return p;
        }
    }
}
addressSchedules findElmSchedules(schedules l, string schID){
    if (first(l) == NULL) {
        return NULL;
    }
    else {
        addressSchedules p = first(l);
        while ( p != NULL && info(p).schID != schID) {
            p = next(p);
        }
        if (p == NULL) {
            return NULL;
        } else {
            return p;
        }
    }
}

addressPassenger findElmPassenger(passenger l , string passengerID){
    if (l.first == NULL) {
        return NULL;
    } else {
        addressPassenger p = l.first;

        while (p != NULL) {

            if (passengerID == info(p).passengerID) {
                return p;
            } else {
                p = next(p);
            }
        }

        if (p == NULL) {
            return NULL;
        } else {
            return p;
        }
    }
}

addressRelasi findElmRelasi(listRelasi l , string  planeID) {
    if (l.first == NULL) {
        return NULL;
    } else {
        addressRelasi p = l.first;
        while (p != NULL && p->info->info.planeID != planeID) {
            p = p->next;
        }

        if (p == NULL) {
            return NULL;
        } else {
            return p;
        }
    }

}


/*=====  End of Find & Searching  ======*/

/*=============================
=            #Print            =
=============================*/

void printPesanan(passenger l , addressPassenger p){
	//addressPassenger p = l.first;
	cout << endl;
	cout << " === Passenger ID === " << endl;
	cout << " > ID Passenger \t : " << p->info.passengerID << endl;
	cout << " > Nama \t : " << p->info.name << endl;
	cout << " > Gender \t : " << p->info.gender << endl;
	cout << " > Age \t : " << p->info.age << endl;
	cout << " > Address \t : " << p->info.address << endl;
	cout << "======================================";
	cout << "\t-> Plane ID \t: " << p->plane->info.planeID << endl;
	cout << "\t-> Type \t: " << p->plane->info.type << endl;
	cout << "\t-> Route \t: " << p->plane->info.route << endl;
	cout << "\t-> Price \t: " << p->plane->info.price << endl;
	cout << "\t-> Capacity \t: " << p->plane->info.capacity << endl;
}

void printInfoSchedules(schedules l) {
    addressSchedules p;
    cout << endl;
    cout << "=== Schedules Data ===" << endl;
    if (l.first != NULL) {
        p = l.first;
        int i = 1;
        while (p != NULL) {
            cout << endl;
        	cout << "----------------------------" << endl;
            cout << "Schedules Data " << i << endl
                << "ID \t: " << p->info.schID << endl
                << "Date \t: " << p->info.date << endl;
            p = p->next;
            i++;
        }
    } else {
        cout << "Data Jadwal tidak ada " << endl;
    }
}



void printInfoPlane(plane l){
    addressPlane p;
    cout << endl;
    cout << "=== Planes Data ===" << endl;
    if (l.first != NULL) {
        p = l.first;
        int i = 1;
        while (p != NULL) {
            cout << endl;
        	cout << "----------------------------" << endl;
            cout << "Planes Data " << i << endl
                 << "ID \t: " << p->info.planeID << endl
                << "Type \t: " << p->info.type << endl
                << "Route \t: " << p->info.route << endl
                << "Price \t: " << p->info.price << endl
                << "Capacity: " << p->info.capacity << endl;
            p = p->next;
            i++;
        }
    } else {
        cout << "Data pesawat tidak ada ";
    }
}

void printSch_Pln(schedules l) {
    addressSchedules p;
    system("CLS");
    cout << endl;
    cout << "=== Schedules Data ===" << endl;
    if (l.first != NULL) {
        p = l.first;
        int i = 1;
        while (p != NULL) {
            cout << endl;
        	cout << "----------------------------" << endl;
            cout << "Schedules Data " << i << endl
                << "ID \t: " << p->info.schID << endl
                << "Date \t: " << p->info.date << endl;

             	if (p->child.first == NULL) {
             		cout << " \n \t -- No Plane --" << endl;
            	 } else {
            		printInfoRelasi(p->child);
            	}

            p = p->next;
            i++;
        }
    } else {
        cout << "Data Jadwal tidak ada " << endl;
    }
}

void printInfoPassenger(passenger l) {
    addressPassenger p;
    cout << endl;
    cout << "=== Passengers Data ===" << endl;
    if (l.first != NULL) {
        p = l.first;
        int i = 1;
        while (p != NULL) {
            cout << endl;
        	cout << "----------------------------" << endl;
            cout << "Passanger Data " << i << endl
                << "ID \t: " << p->info.passengerID << endl
                << "Name \t: " << p->info.name << endl
                << "Age \t: " << p->info.age << endl
                << "Gender \t: " << p->info.gender << endl
                << "Address : " << p->info.address << endl;
            p = p->next;
            i++;
        }
    } else {
        cout << "Pessanger Data tidak ada" << endl;
    }

}


void printInfoRelasi(listRelasi l){
    addressRelasi p = l.first;
    cout << " \t -- PLANE -- " << endl;
    int i = 1;
    while (p != NULL) {
    	cout << "----------------------------" << endl;
		cout<< "\t Pesawat " << i << endl
        	<< "\t ID \t: " << p->info->info.planeID << endl
            << "\t Type \t: " << p->info->info.type << endl
            << "\t Route \t: " << p->info->info.route << endl
            << "\t Price \t: " << p->info->info.price << endl;
        p = p->next;
        i++;
    }
}
/*=====  End of Print  ======*/


/*----------  Relasi  ----------*/
void addJadwaltoPlane(schedules &sch , plane &pln ) {
        addressSchedules p;
        addressPlane q;
        addressRelasi r,s;

        string idPlane , idSchedules;
        char pilih;
       	cout << endl;
		cout << "========================================" << endl;
		cout <<	"=            Zero Reservation          =" << endl;
		cout << "========================================" << endl;
        system("CLS");
        do {
            cout << "Input ID Jadwal \t:"; cin >> idSchedules;
            cout << "Input ID Pesawat\t: "; cin >> idPlane;

            p = findElmSchedules( sch , idSchedules);
            if (p == NULL) {
                cout << "ID Jadwal tidak ditemukan" << endl;
            } else {
                q = findElmPlane( pln , idPlane);
                if (q == NULL) {
                    cout << "ID Pesawat tidak ditemukan" << endl;
                } else {
                    r = alokasiRelasi(q);
                    insertFirst(p->child , r);
                    cout << "\nSuccess... ";
                    cout << info(p).schID << " --- " << info(q).planeID << endl;
                }

                if (p == NULL && q == NULL)
                	cout << "\nFailed...";
            }
           	cout << "Lakukan relasi data lagi ? (y/n) ";
			cin >> pilih;
        } while (pilih != 'n' && pilih != 'N');
}

/*----------  Menu  ----------*/


bool loginAdmin(string username , string password){
    if (username == "admin" && password == "admin")
        return true;
    else
        return false;
}

bool loginPassanger(passenger pas ,string ID, string username , string password){
        addressPassenger p = findElmPassenger(pas , ID);
        if (p != NULL) {
            if (p->info.username == username && p->info.password == password)
                return true;
        } else
        return false;
}

bool login = false;

void menuDelete(schedules &sch , plane &pln , passenger &pas){
	int pilih;
    pilihbalik:
    system("CLS");
    cout << "========================================" << endl;
    cout <<	"=            Zero Reservation          =" << endl;
    cout << "========================================" << endl;
    cout << " 1. Mengapus Jadwal Penerbangan " << endl;
    cout << " 2. Mengapus Data Pesawat " << endl;
    cout << " 3. Mengapus Data Passenger" << endl;
    cout << " 99. Exit" << endl;
    cout << "\nPilih Menu" ;
    cin >> pilih;

    if(cin.fail())
        {
          cin.clear();
          cin.ignore();
          cout << "Error, Input hanya angka...";
          goto pilihbalik;
          // menuTambah( sch, pln , pas);
        } else {

    switch (pilih) {
        case 1 :
            system("CLS");
            deleteSchbyID(sch);
        break;
        case 2 :
            system("CLS");
            deletePlanebyID(pln);
        break;
        case 3 :
            system("CLS");
         	deletePasbyID(pas);
        break;
        case 99 :
            menuAdmin(sch,pln,pas);
        break;
        default :
            cout << "Menu tidak tersedia..." << endl;
            getch();
            goto pilihbalik;
        }

    }
}

void menuEdit(schedules &sch , plane &pln , passenger &pas) {
	int pilih;
    pilihbalik:
    system("CLS");
    cout << "========================================" << endl;
    cout <<	"=            Zero Reservation          =" << endl;
    cout << "========================================" << endl;
    cout << " 1. Mengedit Jadwal Penerbangan " << endl;
    cout << " 2. Mengedit Data Pesawat " << endl;
    cout << " 3. Mengedit Data Passenger" << endl;
    cout << " 99. Exit" << endl;
    cout << "\nPilih Menu" ;
    cin >> pilih;

    if(cin.fail())
        {
          cin.clear();
          cin.ignore();
          cout << "Error, Input hanya angka...";
          goto pilihbalik;
          // menuTambah( sch, pln , pas);
        } else {

    switch (pilih) {
        case 1 :
            system("CLS");
            editSchedules(sch);
        break;
        case 2 :
            system("CLS");
            editPlane(pln);
        break;
        case 3 :
            system("CLS");
         	editPassenger(pas);
        break;
        case 99 :
            menuAdmin(sch,pln,pas);
        break;
        default :
            cout << "Menu tidak tersedia..." << endl;
            getch();
            goto pilihbalik;
        }

    }
}

void menuAdmin(schedules &sch , plane &pln , passenger &pas) {
    int pilih;
    string username,password;
    cout << endl;

        if (!login) {
	    system("CLS");
	    cout << "========================================" << endl;
		cout <<	"=            Zero Reservation          =" << endl;
		cout << "========================================" << endl;
	    cout << " Masukkan Username : "; cin >> username;
	    cout << " Masukkan Password : "; cin >> password;
        }

	    if (loginAdmin(username , password) || login){
	    	login = true;
	        do {
	            pilihbalik:
	             system("CLS");
	             cout << "========================================" << endl;
	            cout <<	"=            Zero Reservation          =" << endl;
	            cout << "========================================" << endl;
	            cout << " 1. Menambah Data Jadwal Penerbangan, Pesawat, dan Passenger" << endl;
	            cout << " 2. Menghapus Data Jadwal Penerbangan, Pesawat, dan Passenger " << endl;
	            cout << " 3. Mengubah Data Jadwal Penerbangan, Pesawat, dan Passenger" << endl;
	            cout << " 4. Relasi Jadwal dengan Pesawat" << endl;
	            cout << " 5. Melihat Jadwal , Pesawat , Passenger" << endl;
	            cout << " 6. Melihat Jadwal -- Pesawat" << endl;
	            cout << " 7. Melihat Pesawat -- Pessanger" << endl;
	            cout << " 99. Log Out" << endl;
	            cout << "\nPilih Menu : " ;
	            cin >> pilih;
	    			if(cin.fail())
				        {
				          cin.clear();
				          cin.ignore();
				          cout << "Error, Input tipe datanya salah.";
				        }

	            switch (pilih) {
	                case 1 :
	                    menuTambah(sch,pln,pas);
	                break;
	                case 2 :
	                   menuDelete(sch,pln,pas);
	                break;
	                case 3 :
	                    menuEdit(sch, pln , pas);
	                break;
	                case 4 :
	                    addJadwaltoPlane(sch , pln);
	                break;
	                case 5 :
	                	system("CLS");
	                    printInfoSchedules(sch);
	                    printInfoPlane(pln);
	                    printInfoPassenger(pas);
	                    //cout << "RELASI" << endl;
	                    //printSch_Pln(sch);
	                    getch();
	                break;
	                case 6 :
	                	printSch_Pln(sch);
	                	getch();
	                break;
	                case 7 :
	                	//Pesawat -- Pessanger;
	                break;
	                case 99:
	                    mainMenu(sch , pln , pas);
	                    break;
	                default :
	                    cout << "Menu tidak ada : " << endl;
	                    goto pilihbalik;
	                break;
	            }
	        } while (pilih != 99);
	    } else {
	        cout << "Username atau Password salah" << endl;
	        getch();
	        mainMenu(sch,pln,pas);
	    }

}

void menuPassanger(schedules &sch , plane &pln , passenger &pas) {
    int pilih;
    string username,password,ID;
    addressPassenger p;

    system("CLS");
    cout << endl;
    cout << "========================================" << endl;
	cout <<	"=            Zero Reservation          =" << endl;
	cout << "========================================" << endl;
    cout << "Masukkan Passenger ID \t: "; cin >> ID;
    cout << "Masukkan Username \t: "; cin >> username;
    cout << "Masukkan Password \t: "; cin >> password;

    if (loginPassanger(pas , ID ,username , password)) {
        p = findElmPassenger(pas , ID);
        do {
            pilihbalik:
            system("CLS");
            cout << "Selamat Datang - " << username << endl;
            cout << "========================================" << endl;
        	cout <<	"=            Zero Reservation          =" << endl;
        	cout << "========================================" << endl;
            cout << " 1. Memesan Penerbangan" << endl;
            cout << " 2. Melihat Pemesanan " << endl;
            cout << " 3. Edit Profile" << endl;
            cout << " 99. Back" << endl;
            cout << "\nPilih Menu : " ;
            cin >> pilih;

            if(cin.fail())
            {
              cin.clear();
              cin.ignore();
              cout << "Error,Input hanya angka... " << endl;
              getch();
              goto pilihbalik;
            } else {

                switch (pilih) {
                case 1 :
                    system("CLS");
                    addPassengertoPlane(pln , pas);
                break;
                case 2 :
                    printPesanan(pas , p);
                break;
                case 3 :
                    //editPessanger();
                break;
                case 99 :
                break;
                break;
                        default :
                        cout << "Menu tidak ada : " << endl;
                    break;
                }
            }
        } while (pilih != 99);
    } else {
        cout << "Username atau Password salah" << endl;
        getch();
    }
    mainMenu(sch,pln,pas);
}



void mainMenu(schedules &sch, plane &pln , passenger &pas) {
    //clrscr();
    int pilih;
    login = false;
         pilihbalik:
        system("CLS");
        cout << "========================================" << endl;
    	cout <<	"=            Zero Reservation          =" << endl;
    	cout << "========================================" << endl;
        cout << " 1. ADMIN" << endl;
        cout << " 2. Passangers " << endl;
        cout << " 99. Exit" << endl;
        cout << "\nPilih Menu : " ;
        cin >> pilih;

        if(cin.fail())
        {
          cin.clear();
          cin.ignore();
          cout << "Error,Input hanya angka... " << endl;
          getch();
          goto pilihbalik;
        } else {

        switch (pilih) {
            case 1 :
                menuAdmin(sch , pln , pas);
            break;
            case 2 :
                menuPassanger(sch , pln , pas);
            case 99 :
                exit(1);
                break;
            default :
                cout << "Tidak ada pilihan" << endl;
                getch();
                goto pilihbalik;
            break;
        }
    }
}

void menuTambah(schedules &sch, plane &pln , passenger &pas){
    int pilih;
    pilihbalik:
    system("CLS");
    cout << "========================================" << endl;
    cout <<	"=            Zero Reservation          =" << endl;
    cout << "========================================" << endl;
    cout << " 1. Menambah Jadwal Penerbangan " << endl;
    cout << " 2. Menambah Data Pesawat " << endl;
    cout << " 3. Menambah Data Passenger" << endl;
    cout << " 99. Exit" << endl;
    cout << "\nPilih Menu" ;
    cin >> pilih;

    if(cin.fail())
        {
          cin.clear();
          cin.ignore();
          cout << "Error, Input hanya angka...";
          goto pilihbalik;
          // menuTambah( sch, pln , pas);
        } else {

            switch (pilih) {
            case 1 :
                system("CLS");
                insertSchedulesMain(sch);
            break;
            case 2 :
                system("CLS");
                insertPlaneMain(pln);
            break;
            case 3 :
                system("CLS");
                insertPassengerMain(pas);
            break;
            case 99 :
                menuAdmin(sch,pln,pas);
            break;
            default :
                cout << "Menu tidak tersedia..." << endl;
                getch();
                goto pilihbalik;
            }

        }
}

/*----------  Exception Handler  ----------*/
bool is_number(const std::string& s)
{
    std::string::const_iterator it = s.begin();
    while (it != s.end() && std::isdigit(*it)) ++it;
    return !s.empty() && it == s.end();
}



/*============================
=            Edit            =
============================*/
void editSchedules(schedules &l){
	addressSchedules p;
	p = l.first;

	string ID;
char pilih ;
	dataSchedules x;

	do {
		cout << "========================================" << endl;
	    cout <<	"=            Zero Reservation          =" << endl;
	    cout << "========================================" << endl;
		cout << "Masukkan ID Schedules : "  ;
		cin >> ID;

		p = findElmSchedules(l,ID);

		if (p == NULL) {
			cout << "Data tidak ditemukan" << endl;
		} else {
			cout << "\t --Edit --" << endl;
			pilihbalik:
			cout << " Masukkan ID Schedules baru : ";
			cin >> x.schID;

			 if ( checkSchedulesID( l ,x.schID) ){
                cout << " -- Already Exist" << endl;
                cout << "Input another name " << endl;
                goto pilihbalik;
             }
			cout << " Masukkan Tanggal baru : ";
			cin >> x.date;
		}


		cout << "Edit Data Lagi ? ( Y / N ) ";
		cin >> pilih;
	} while ( pilih != 'n' && pilih != 'N');

}

void editPlane(plane &l) {
	addressPlane p = l.first;

	string ID;
	char pilih ;
	dataPlane x;
		cout << "========================================" << endl;
	    cout <<	"=            Zero Reservation          =" << endl;
	    cout << "========================================" << endl;

	do {
		cout << "Masukkan ID Pesawat : "  ;
		cin >> ID;

		p = findElmPlane(l,ID);

		if (p == NULL) {
			cout << "Data tidak ditemukan" << endl;
		} else {
			cout << "\t --Edit --" << endl;
			pilihbalikID:
			cout << " Masukkan ID Pesawat baru : ";
			cin >> x.planeID;

            if ( checkPlaneID( l ,x.planeID) ){
                cout << " -- Already Exist" << endl;
                cout << "Input another name " << endl;
                goto pilihbalikID;
            }

			cout << " Masukkan Type baru : ";
			cin >> x.type;
			cout << "Masukkan Rute baru : ";
			cin >> x.route;
			pilihbalik:
			cout << "Masukkan Harga baru : ";
			cin >> x.price;
				if(cin.fail()) {
					cin.clear();
					cin.ignore();
					cout << "Bukan tipe data harga, masukkan angka" << endl;
					goto pilihbalik;
				}

			pilihbalik2:
			cout << "Masukkan Kapasitas baru : ";
			cin >> x.capacity;
				if(cin.fail()){
					cin.clear();
					cin.ignore();
					cout << "Bukan tipe data kapasitas, masukkan angka" << endl;
					goto pilihbalik2;
				}

				p->info.planeID = x.planeID;
				p->info.type = x.type;
				p->info.route = x.route;
				p->info.price = x.price;
				p->info.capacity = x.capacity;
		}


		cout << "Edit Data Lagi ? ( Y / N ) ";
		cin >> pilih;
	} while ( pilih != 'n' && pilih != 'N');

}

void editPassenger(passenger &l){
    addressPassenger p = l.first;

	string ID;
	char pilih ;
	dataPassenger x;
	bool ada;

	do {
		cout << "========================================" << endl;
	    cout <<	"=            Zero Reservation          =" << endl;
	    cout << "========================================" << endl;
		cout << "Masukkan ID Passenger : "  ;
		cin >> ID;

		p = findElmPassenger(l,ID);

		if (p == NULL) {
			cout << "Data tidak ditemukan" << endl;
		} else {
			cout << "\t --Edit --" << endl;
			pilihbalikID:
			cout << " Masukkan ID Passenger baru : ";
			cin >> x.passengerID;

            if ( checkPassengerID( l ,x.passengerID) ){
                cout << " -- Already Exist" << endl;
                cout << "Input another name " << endl;
                goto pilihbalikID;
            }

			cout << " Masukkan Nama baru : ";
			cin >> x.name;
			cout << "Masukkan Username baru : ";
			cin >> x.username;
			cout << "Masukkan Password baru : ";
			cin >> x.password;
			pilihbalik:
			cout << "Masukkan Umur baru : " ;
			cin >> x.age;
				if (cin.fail()) {
					cin.clear();
					cin.ignore();
					cout << "Tipe data umur salah, masukkan angka" << endl;
					goto pilihbalik;
				}
			cout << "Masukkan Gender baru : ";
			cin >> x.gender;
			cout << "Masukkan Address baru : ";
			cin >> x.address;

				p->info.passengerID = x.passengerID;
				p->info.name = x.name;
				p->info.username = x.username;
				p->info.password = x.password;
				p->info.age = x.age;
				p->info.gender = x.gender;
				p->info.address = x.address;
		}

		cout << "Edit Data Lagi ? ( Y / N ) ";
		cin >> pilih;
	} while ( pilih != 'n' && pilih != 'N');

}
/*=====  End of Edit  ======*/



/*=====================================
=            Check Element            =
=====================================*/

bool checkPlaneID(plane l , string ID) {

	addressPlane p = l.first;

	p = findElmPlane(l , ID);

	if ( p == NULL) {
		return false;
	} else {
		return true;
	}

}

bool checkSchedulesID(schedules l , string ID) {
	addressSchedules p = l.first;

	p = findElmSchedules(l , ID);

	if ( p == NULL)
		return false;
	else
		return true;

}

bool checkPassengerID(passenger l , string ID) {
	addressPassenger p = l.first;

	p = findElmPassenger(l , ID);

	if ( p == NULL)
		return false;
	else
		return true;
}

/*=====  End of Check Element  ======*/

void addPesanan(plane &pln , addressPlane p) {

}


void addPassengertoPlane(plane &pln , passenger &pas  ) {
	addressPlane p;
	addressPassenger q;
	string planeID , passID;
	char pilih;

	cout << "========================================" << endl;
	cout <<	"=            Zero Reservation          =" << endl;
	cout << "========================================" << endl;

	pilihID:

	//do {
	cout << "Masukkan ID Pesawat : " ;
	cin >> planeID;

		p = findElmPlane(pln , planeID);

		if ( p == NULL) {
			cout << " -- ID Pesawat tidak ditemukan --" << endl;
			goto pilihID;
		}

	pilihID2:
	cout << "Masukkan ID Passenger : ";
	cin >> passID;

	q = findElmPassenger(pas , passID);

		if ( p == NULL) {
			cout << " -- ID Passenger tidak ditemukan --" << endl;
			goto pilihID2;
		}


	cout << "\nSuccess... ";
	cout << p->info.planeID << " -- " << q->info.passengerID << endl;
	cout << " Pesanan Berhasil...";
	//	cout << "\n Pesan lagi ? (y/n)" ;
	//cin >> pilih;
	//} while (pilih != 'n' && pilih != 'N');

}

void connect(addressPlane p , addressPassenger q){
	q->plane = p;
}

void disconnect(addressPassenger p) {
	p->plane = NULL;
}
